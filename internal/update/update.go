package update

import (
	"log/slog"

	"github.com/castai/malware-feed/internal/config"
)

func Update() error {
	slog.Info("Updating feed")
	const CONFIG_FILE = "config.ini"
	_, err := config.Load(CONFIG_FILE)
	if err != nil {
		slog.Error("Failed to load config")
		return err
	}

	// repos := load_tracked_repos(REPOS_SOURCE_FILE)
	// known_entries := load_feed(FEED_FILE)

	// group entries by their name and get lates version
	// malwares := group_entries_by_name(known_entries)

	// if there is a Malware in the feed which is no longer tracked, it will be kept in the feed but not updated
	// num_updates := 0
	// for repo := range repos {

	//     malware = malwares.get(repo.malware_name, None)
	//     is_new_malware = malware is None
	//     if is_new_malware:
	//         slog.debug(f"New Malware '{repo.malware_name}' added to feed")
	//         malwares[repo.malware_name] = malware = Malware(
	//             repo.malware_name, repo.category, {}
	//         )
	//     num_updates += update_malware_entries(
	//         repo,
	//         malware,
	//         last_n_months=LAST_N_MONTHS,
	//         force_latest_release=is_new_malware,
	//     )
	// }

	// if num_updates > 0 {
	//     malwares = deduplicate_entries(list(malwares.values()), repos)
	//     // override latest feed and provide a copy of today as backup
	//     save_feed(FEED_FILE, malwares)
	//     today = datetime.date.today().strftime("%Y-%m-%d")
	//     shutil.copy(FEED_FILE, FEED_DIR / f"{today}.csv")
	// } else {
	//     logger.info(f"No updates found for {len(repos)} tracked repositories")
	// }

	return nil
}

func update_malware_entries() {

}
